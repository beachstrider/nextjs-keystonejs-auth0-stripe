# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type User {
  id: ID!
  name: String
  company: String
  address: String
  email: String
  password: PasswordState
  vendor(
    where: VendorWhereInput! = {}
    orderBy: [VendorOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Vendor!]
  vendorCount(where: VendorWhereInput! = {}): Int
  plan: String
  customerId: String
  subscriptionId: String
  subscriptionStatus: String
}

type PasswordState {
  isSet: Boolean!
}

input UserWhereUniqueInput {
  id: ID
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringFilter
  company: StringFilter
  address: StringFilter
  email: StringFilter
  vendor: VendorManyRelationFilter
  plan: StringFilter
  customerId: StringFilter
  subscriptionId: StringFilter
  subscriptionStatus: StringFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input VendorManyRelationFilter {
  every: VendorWhereInput
  some: VendorWhereInput
  none: VendorWhereInput
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  company: OrderDirection
  address: OrderDirection
  email: OrderDirection
  plan: OrderDirection
  customerId: OrderDirection
  subscriptionId: OrderDirection
  subscriptionStatus: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input UserUpdateInput {
  name: String
  company: String
  address: String
  email: String
  password: String
  vendor: VendorRelateToManyForUpdateInput
  plan: String
  customerId: String
  subscriptionId: String
  subscriptionStatus: String
}

input VendorRelateToManyForUpdateInput {
  disconnect: [VendorWhereUniqueInput!]
  set: [VendorWhereUniqueInput!]
  create: [VendorCreateInput!]
  connect: [VendorWhereUniqueInput!]
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  company: String
  address: String
  email: String
  password: String
  vendor: VendorRelateToManyForCreateInput
  plan: String
  customerId: String
  subscriptionId: String
  subscriptionStatus: String
}

input VendorRelateToManyForCreateInput {
  create: [VendorCreateInput!]
  connect: [VendorWhereUniqueInput!]
}

type Vendor {
  id: ID!
  organizationName: String
  vendorEmail: String
  status: String
  user: User
}

input VendorWhereUniqueInput {
  id: ID
}

input VendorWhereInput {
  AND: [VendorWhereInput!]
  OR: [VendorWhereInput!]
  NOT: [VendorWhereInput!]
  id: IDFilter
  organizationName: StringFilter
  vendorEmail: StringFilter
  status: StringNullableFilter
  user: UserWhereInput
}

input StringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringNullableFilter
}

input NestedStringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringNullableFilter
}

input VendorOrderByInput {
  id: OrderDirection
  organizationName: OrderDirection
  vendorEmail: OrderDirection
  status: OrderDirection
}

input VendorUpdateInput {
  organizationName: String
  vendorEmail: String
  status: String
  user: UserRelateToOneForUpdateInput
}

input UserRelateToOneForUpdateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
}

input VendorUpdateArgs {
  where: VendorWhereUniqueInput!
  data: VendorUpdateInput!
}

input VendorCreateInput {
  organizationName: String
  vendorEmail: String
  status: String
  user: UserRelateToOneForCreateInput
}

input UserRelateToOneForCreateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

type Company {
  id: ID!
  name: String
  summary: String
  content: Company_content_Document
  year: DateTime
}

type Company_content_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

scalar DateTime
  @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input CompanyWhereUniqueInput {
  id: ID
}

input CompanyWhereInput {
  AND: [CompanyWhereInput!]
  OR: [CompanyWhereInput!]
  NOT: [CompanyWhereInput!]
  id: IDFilter
  name: StringFilter
  summary: StringFilter
  year: DateTimeFilter
}

input DateTimeFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeFilter
}

input CompanyOrderByInput {
  id: OrderDirection
  name: OrderDirection
  summary: OrderDirection
  year: OrderDirection
}

input CompanyUpdateInput {
  name: String
  summary: String
  content: JSON
  year: DateTime
}

input CompanyUpdateArgs {
  where: CompanyWhereUniqueInput!
  data: CompanyUpdateInput!
}

input CompanyCreateInput {
  name: String
  summary: String
  content: JSON
  year: DateTime
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON
  @specifiedBy(
    url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf"
  )

type Mutation {
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createVendor(data: VendorCreateInput!): Vendor
  createVendors(data: [VendorCreateInput!]!): [Vendor]
  updateVendor(where: VendorWhereUniqueInput!, data: VendorUpdateInput!): Vendor
  updateVendors(data: [VendorUpdateArgs!]!): [Vendor]
  deleteVendor(where: VendorWhereUniqueInput!): Vendor
  deleteVendors(where: [VendorWhereUniqueInput!]!): [Vendor]
  createCompany(data: CompanyCreateInput!): Company
  createCompanies(data: [CompanyCreateInput!]!): [Company]
  updateCompany(
    where: CompanyWhereUniqueInput!
    data: CompanyUpdateInput!
  ): Company
  updateCompanies(data: [CompanyUpdateArgs!]!): [Company]
  deleteCompany(where: CompanyWhereUniqueInput!): Company
  deleteCompanies(where: [CompanyWhereUniqueInput!]!): [Company]
  endSession: Boolean!
  authenticateUserWithPassword(
    email: String!
    password: String!
  ): UserAuthenticationWithPasswordResult
  createInitialUser(
    data: CreateInitialUserInput!
  ): UserAuthenticationWithPasswordSuccess!
}

union UserAuthenticationWithPasswordResult =
    UserAuthenticationWithPasswordSuccess
  | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  name: String
  company: String
  email: String
  password: String
}

type Query {
  users(
    where: UserWhereInput! = {}
    orderBy: [UserOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [User!]
  user(where: UserWhereUniqueInput!): User
  usersCount(where: UserWhereInput! = {}): Int
  vendors(
    where: VendorWhereInput! = {}
    orderBy: [VendorOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Vendor!]
  vendor(where: VendorWhereUniqueInput!): Vendor
  vendorsCount(where: VendorWhereInput! = {}): Int
  companies(
    where: CompanyWhereInput! = {}
    orderBy: [CompanyOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Company!]
  company(where: CompanyWhereUniqueInput!): Company
  companiesCount(where: CompanyWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
}

union AuthenticatedItem = User

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  enableSignout: Boolean!
  enableSessionItem: Boolean!
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  description: String
  isOrderable: Boolean!
  isFilterable: Boolean!
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum QueryMode {
  default
  insensitive
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
